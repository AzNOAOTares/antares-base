#!/usr/bin/env python3
from antares.context import *

class Alert:
    """Represents a general alert. It is the super class of :py:class:`CameraAlert`
    and :py:class:`ExternalAlert` where a camera alert is generated by LSST and an
    external alert is from sources other than LSST."""

    def __init__( self, alert_id, ra, decl ):
        """Initialize with an Alert ID."""
        self.ID = alert_id
        self.ra = ra
        self.decl = decl

class ExternalAlert( Alert ):
    """Represents an external alert which is a sub-class of :py:class:`Alert`.
    An external alert is from sources other than LSST."""
    pass
    
class CameraAlert( Alert ):
    """
    Represents a camera alert which is a sub-class of :py:class:`Alert`.
    A camera alert is associated with CA, IM, IR, IS and LA context objects.
    and is initialized with these 5 available contexts.

    :param: :py:class:`antares.context.CAContext` CA: CA context object
    :param: :py:class:`antares.context.IMContext` IM: IM context object
    :param: :py:class:`antares.context.IRContext` IR: IR context object
    :param: :py:class:`antares.context.ISContext` IS: IS context object
    :param: :py:class:`antares.context.LAContext` LA: LA context object
    """
    
    CA = None
    """
    CA (Camera Alert) context object. CA attributes are always available.

    :type: :py:class:`antares.context.CAContext`
    """

    IM = None
    """IM (Image) context object.

    :type: :py:class:`antares.context.IMContext`
    """

    IR = None
    """IR (Image RAFT) context object.

    :type: :py:class:`antares.context.IRContext`
    """

    IS = None
    """IS (Image Section) context object.
    
    :type: :py:class:`antares.context.ISContext`
    """

    LA = None
    """LA (Locus-aggregated Alert) context object. LA attributes are always available.

    :type: :py:class:`antares.context.LAContext`
    """

    def __init__( self, alert_id, ra, decl, CA, IM=None, IR=None, IS=None ):
        super().__init__( alert_id, ra, decl )
        self.CA = CA
        self.LA = LAContext( alert_id ) # LA context is implicit

    def __str__( self ):
        return 'Alert {0} at (ra={1}, dec={2})\n{3}'.format(
            self.ID, self.ra, self.decl, self.CA)

    def throttle( self, annotation ):
        """
        Throttle the alert.
        
        :param string annotation: a short description of why the alert is throttled.
        """
        pass

    def divert( self, annotation ):
        """
        Divert the alert.

        :param string annotation: a short description of why the alert is diverted.
        """
        pass


class AlertReplica( CameraAlert ):
    """
    Represents an alert replica. It is a sub-class of :py:class:`CameraAlert`.
    Beyond contexts available for CameraAlert, an alert replica is also
    associated with AO, AR, ES, LA, and PS context objects.
    Replica is initialized with its associated astro object (optional).

    :param: astrobj(:py:class:`antares.alert.AstroObject`): associated astro object (optional). 
    """
    
    AR = None
    """
    AR (Alert Replica) context object.
    AR attributes are only accessible during per-replica processing.

    :type: :py:class:`antares.context.ARContext`
    """

    AO = None
    """AO (Astro Object) context object. AO attributes are available if
    ``AR.HasAstroObject`` = :py:data:`True`.

    :type: :py:class:`antares.context.AOContext`
    """

    ES = None
    """ES (Extended Source) context object. ES attributes are available only
    if ``AO.kind = "extended source"``.

    :type: :py:class:`antares.context.ESContext`
    """

    PS = None
    """PS (Point Source) context object. PS attributes are available only
    if ``AO.kind = "point source"``.

    :type: :py:class:`antares.context.PSContext`
    """

    def __init__( self, astroobj=None ):
        """Replica is initialized with its associated astro object (optional)."""
        pass


class AlertCombo( CameraAlert ):
    """
    Represents an alert combo which consists of a set of alert replicas
    together with associated astro objects. It is a sub-class of CameraAlert.
    Beyond contexts available for CameraAlert,
    an alert combo is also associated with CB context objects.
    Combo is initialized with a set of alert replicas.

    :param: alert_replicas (:py:class:`list`): a list of :py:class:`AlertReplica`
    """
    
    CB = None
    """CB (Combo) context object. CB attributes are only visible during
    per-combo processing.

    :type: :py:class:`antares.context.CBContext`
    """

    def __init__( self, alert_replicas ):
        """Combo is initialized with a set of alert replicas."""
        pass


class AstroObject:
    """
    Represents an astro object.
    """
    
    def __init__( self ):
        pass

